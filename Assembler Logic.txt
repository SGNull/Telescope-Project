Translate file, replacing references with NULL in output.
Then read through the file again, replacing the NULL's in order.




PCVar=0
Goto MainReader

LabelLookup
	

DictionaryLookup(Key, SizeOfEntries, Dictionary)
	Matches key to first element of entry
	Returns pointer to entry
	Stops and returns NULL if it reaches NULL
	Return to RG7

MnemonicHash(Char0, Char1, Char2)
	Return the hash of the mnemonic given
	Return to RG7

IsDecWord
	Translate the line directly (very quick using masks)
	Goto MainReader

IsHexWord
	Translate the line directly
	Goto MainReader

IsInstWord
	Get char0
	Get char1
	Get char2
	Do out = MnemonicHash(Char0, Char1, Char2)
	Do DictionaryLookup(out, 3, 

SkipLine
	Read until /n
	Goto MainReader

CreateLabel(PCVar)
	The current input pointer should be on a label, so add it to the label table
	Return to MainReader

CreateConst
	Add the current input pointer to the label table
	
	Then read twice

	If char == HEXCHAR, translate it into a value and store it in the label table

	If char == DECCHAR, translate it into a value and store it in the label table

	Goto MainReader

MainReader
	Grab char

	Do out = DictionaryLookup(char, 1, SkipChars)
	If out+1 does not carry, goto MainReader

	Do out = DictionaryLookup(char, 1, SkipLineChars)
	If out+1 does not carry, goto SkipLine

	If char == STOPCHAR, stop

	If char == HEXCHAR, goto LineIsHex

	If char == DECCHAR, goto LineIsDec
	
	If char == REFERENCE, output NULL and goto MainReader

	If char == LABEL, goto CreateLabel(PCVar)
	
	If char == CONST, goto CreateConst
	
	PCVar++
	Goto MainReader






Instructions_LUT{Hash, Value, Bitmap[HasMod, HasOp0, HasOp1]}