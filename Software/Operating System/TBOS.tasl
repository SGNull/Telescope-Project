JMP >Init
(% TBOS v1.0
   ---------
  
   TSOS is a small-scale operating system for the Telescope Computer System.
   It will intentionally be written with as few "magic numbers" as possible for maximum versatility.
   It would be very difficult to let empty arrays be defined using labels in TASL, so instead comments are added for clarification.
  
   v1.0 Adds the foundations for the operating system, which includes:
		Program starting and memory allocation.
		Process stopping and memory deallocation.
		Multiprogramming (though not multithreading).
		Process family tree.
  
   With the specs:
		16 max processes.
		Round robin process scheduling.
		First open spot is allocated in memory.
		Memory allocation/deallocation via 4-word bitmap.
		Memory allocation bitmap includes OS occupied chunks (stack + code).

   Here is how exceptions are handled:
		Interrupts: Not supported (OS will error)
		CTDZ: Pauses the current process and runs the next one.
		SYS: Tries to spawn a process as a child of the current one. See Status & Return Codes for return codes.
		PRIV: Terminates the current process and all of its children.
		OOB: Terminates the current process and all of its children.
  
   v1.0 is especially minimalist, and future versions will modify 1.0 to achieve higher functions.
   IMPORTANT: In TBOS, a program's heap & stack space may start as non-zero.
   
   
   v1.1 Works with the TSFS file system, and splits the original 1.0 syscall into two:
		RG0 == 0 -> The original syscall
		RG0 == 1 -> File system spawn program. RG1 contains the file number
   
   Additionally, there is a "give up turn" syscall:
		Rg0 == 2 -> OS switches control to the next program
   
   Note that the OS still looks for a loadable root drive.
%)

/ ------------------------------------------------------------Data------------------------------------------------------------
(/ ------- Hardware constants -------
	/ Processor constants
	@WORD_SIZE 			= 16  / Word size in bits (always must be 16)

	@DRIVE_IOP_GROUP     	= 0
	@DRIVE_PTR_IOP_GROUP 	= 1
	@IOP_GROUP_MASK 		= 0xE000
	@IOP_GROUP_SHIFT 		= 13
	@IOP_DEVICE_MASK		= 0x1800
	@IOP_DEVICE_SHIFT		= 11
	@DRIVE_PTR_BIT 			= 13

	@HI_SHIFT 	= 8
	@LO_SHIFT	= >HI_SHIFT
	@LO_MASK 	= 0x00FF

	@EXC_MASK 	= 0x0700
	@EXC_SHIFT 	= 8
	
	@UE_PU_SHIFT = 3
	
	@EXC_CTDZ 	= 4
	@EXC_SYS 	= 5
	@EXC_PRIV 	= 6
	@EXC_OOB 	= 7


	/ Computer determined hardware constants
	@PC_STATUS_IOP 		= 0xF000
	@RANDOM_IOP 		= >PC_STATUS_IOP
	@COUNTER_START_IOP 	= 0xE000
	@COUNTER_STOP_IOP 	= 0xE800


	/ OS determined hardware constants
	@USER_PROC_FLG = 0x000C			/ Exceptions enabled and user mode enabled
	@ROOT_PROC_FLG = >USER_PROC_FLG	/ Currently, root proc has same privs as users

	@ROOT_DRIVE_IOP = 0x0000	/ 0th drive
)


(/ ------- OS Data Properties -------
	/ Process = [1-bit Active] 000 [4-bit parent] [4-bit nextSib] [4-bit child]
	/ NOTE: This could be modified to support 32 procs, but memory conflicts would be much more likely.
	@MAX_PROC_COUNT = 16
	@PROC_WORDS		= 1		/ must be under 16
	@PROC_CxPROC_W 	= 16	/ must be MAX_PROC_COUNT x PROC_WORDS
	#ProcList 		= ~PROC_CxPROC_W

	@PROC_ACTIVE_BIT	= 15
	@PARENT_MASK 		= 0xF00
	@PARENT_SHIFT 		= 8
	@SIB_MASK 			= 0xF0
	@SIB_SHIFT 			= 4
	@CHILD_MASK 		= 0xF

	@ROOT_PROC_ID = 0				/ Must be 0
	@NULL_PROC_ID = >ROOT_PROC_ID	/ Must be ROOT_PROC_ID

	#ProcCount 		= 0		/ Number of running processes
	#CurrentProcID 	= 0	/ Current running process


	/ EXA and CTD are constant, PC is in the OS, and IO doesn't make sense to store, so 12 words per state
	/ Each state has the following format: RG0-7, FLG, SP, EPC, HLB
	@STATE_REG_COUNT	= 12  / Number of registers which should be stored (always 12)
	@PROC_CxSTATE_S 	= 192 / 16 max proc x 12 words per proc = 192
	#StateList 			= ~PROC_CxSTATE_S
	@FLG_OFFSET 		= 8
	@SP_OFFSET 			= 9
	@EPC_OFFSET 		= 10
	@HLB_OFFSET 		= 11

	@CHUNK_SIZE = 0x0400
	@NUM_CHUNKS = 64		/ Must be (2^16)/CHUNK_SIZE
	@BMP_WORDS 	= 4			/ Must be NUM_CHUNKS/16, and under 16
	#MallocBMPs = (~BMP_WORDS)

	/ Where (some of) the state of the CPU is immediately stored at.
	#TState = (~STATE_REG_COUNT)

	#MarkInst: ALU SET RG5 RG4
	#UnmarkInst: ALU UST RG5 RG4
)


(/ ------- OS External Constants -------
	@CTD_VAL = 0x0020
	
	@TSFS_ENTRY_SIZE = 2
	
	@SYSCODE_LOAD 		= 0
	@SYSCODE_LOADTSFS 	= 1
	@SYSCODE_GIVEUPTURN = 2
)


(/ ------- Status & Return Codes -------
	@START_CODE 		= 1
	@RUN_CODE 			= 2
	@END_CODE 			= 0x600D

	@BAD_START_ERROR 		= 0xFF00
	@UNKNOWN_EXC_ERROR 		= 0xFF01
	@UNKNOWN_SYSCODE_ERROR 	= 0xFF02
	
	@SYS_SPAWN_PROG_GOOD	= 0x00A1
	@SYS_SPAWN_PROG_MEM		= 0xF000
	@SYS_SPAWN_PROG_MAX		= 0xF001
	@SYS_SPAWN_PROG_PRIV	= 0xF002
	@SYS_SPAWN_PROG_FLG		= 0xF003
	@SYS_SPAWN_PROG_MISSING = 0xF004
)



/ ------------------------------------------------------------Code------------------------------------------------------------



/ Initializes the OS environment
#Init  %!Fn% = {
	/ Set the status
	LDI RG0 >START_CODE; LDI FLG >PC_STATUS_IOP; MOV IO RG0
	
	/ Start the cycle counter
	LDI FLG >COUNTER_START_IOP; MOV IO RG0
	
	/ Calculate the OS size in chunks in RG1
	LDI RG1 >OSEndPoint; LDI RG0 >CHUNK_SIZE; ALU DIV RG1 RG0
	ALI ADD RG1 2  / Add the stack chunk + 1 for remainder
	
	/ Call MarkBits(start chunk, size)
	LDI RG0 >NUM_CHUNKS; ALI SUB RG0 1  / Adjust for stack (will be at end of mem)
	CAL >MarkBits
	
	/ Load the root program
	LDI FLG >ROOT_DRIVE_IOP; CAL >LoadProgram
	AIN ADD OUT 1; JIF NCR >Ini.OK
		LDI RG0 >BAD_START_ERROR; JMP >StatusHalt
	#Ini.OK
	
	/ Create the root thread
	MOV RG0 OUT; LDI FLG >ROOT_PROC_FLG
	CAL >MakeChildThread
	
	/ Set the new status
	LDI RG0 >RUN_CODE; LDI FLG >PC_STATUS_IOP; MOV IO RG0
	
	/ Make sure the dispatcher runs root first
	NUL RG0; STR RG0 RG0 >CurrentProcID
	
	/ Send control off to the dispatcher
	JMP >Dispatcher
}



/ Sets the status to RG0 and halts
#StatusHalt  %!Fn% = {
	LDI FLG >COUNTER_STOP_IOP
	MOV IO RG0
	LDI FLG >PC_STATUS_IOP
	MOV IO RG0
	HLT
}



/ The scheduler/dispatcher runs the next process (and checks for done/deadlock/etc.)
#Dispatcher  %!Fn% = {
	/ Check if we're done
	ZRO RG0; LOD RG0 RG0 >ProcCount
	PAS RG0; JIF EQZ >Dis.Done
	
	/ If not, get the next process ID in RG0
	ZRO RG0; LOD RG0 RG0 >CurrentProcID
	#Dis.GetNext
		INC RG0
		LDI RG1 >MAX_PROC_COUNT; ALU MOD RG0 RG1
		
		/ Then get its main word in RG1
		MOV RG1 RG0; LDI RG2 >PROC_WORDS; ALU MUL RG1 RG2
		LOD RG1 RG1 >ProcList
	/ Now run it if it's active
	AIN SET RG1 >PROC_ACTIVE_BIT; JIF NCR >Dis.GetNext
	
	/ Store the new current process
	STR RG0 RG0 >CurrentProcID
	
	/ Load the process' state and resume it.
	ALI MUL RG0 >STATE_REG_COUNT; LDI RG1 >StateList; ALU ADD RG0 RG1
	LOD EPC RG0 >EPC_OFFSET
	LDI EXA >ExHandler
	LDI CTD >CTD_VAL
	LOD HLB RG0 >HLB_OFFSET
	LOD FLG RG0 >FLG_OFFSET
	LOD SP RG0 >SP_OFFSET
	LOD RG7 RG0 7
	LOD RG6 RG0 6
	LOD RG5 RG0 5
	LOD RG4 RG0 4
	LOD RG3 RG0 3
	LOD RG2 RG0 2
	LOD RG1 RG0 1
	LOD RG0 RG0 0
	
	RSM
	
	
	#Dis.Done
	LDI RG0 >END_CODE
	JMP >StatusHalt
}



/ Handles any exceptions that occur
#ExHandler  %!Fn% = {
	/ Store off RG0-2 and FLG for CTDZ
	STR RG0 RG0 >TState
	LDI RG0 >TState
	STR RG1 RG0 1
	STR RG2 RG0 2
	STR FLG RG0 >FLG_OFFSET
	
	/ Check if it's CTDZ
	LDI RG0 >EXC_MASK; ALU AND RG0 FLG; ALI SRB RG0 >EXC_SHIFT
	CMI RG0 >EXC_CTDZ; JEQ >BurstOver
	
	/ Check if it's unrecoverable
	CMI RG0 >EXC_PRIV; JEQ >TerminateCurrent
	CMI RG0 >EXC_OOB; JEQ >TerminateCurrent
	
	/ Check for Syscall
	CMI RG0 >EXC_SYS; JEQ >SysHandler
	
	/ Else, error
	LDI RG0 >UNKNOWN_EXC_ERROR
	JMP >StatusHalt
}



/ Retires the previous process, then jumps to Dispatcher
#BurstOver  %!Fn% = {
	/ Get current proc's actual state address in RG0
	ZRO RG0; LOD RG0 RG0 >CurrentProcID; ALI MUL RG0 >STATE_REG_COUNT
	LDI RG1 >StateList; ALU ADD RG0 RG1
	
	/ Put TState's address in RG1
	LDI RG1 >TState
	
	/ Copy (what's currently in) TState to the current state
	LOD RG2 RG1 0; STR RG2 RG0 0
	LOD RG2 RG1 1; STR RG2 RG0 1
	LOD RG2 RG1 2; STR RG2 RG0 2
	LOD RG2 RG1 >FLG_OFFSET; STR RG2 RG0 >FLG_OFFSET
	
	/ Now copy the rest of the registers to the current state
	/ Note: HLB is constant
	STR RG3 RG0 3
	STR RG4 RG0 4
	STR RG5 RG0 5
	STR RG6 RG0 6
	STR RG7 RG0 7
	STR SP RG0 >SP_OFFSET
	STR EPC RG0 >EPC_OFFSET
	
	/ Now return control to the dispatcher
	JMP >Dispatcher
}



/ Calls terminate on the current process then returns to the dispatcher
#TerminateCurrent  %!Fn% = {
	ZRO RG0; LOD RG0 RG0 >CurrentProcID; NUL RG1
	LDI RA >Dispatcher; JMP >Terminate
}



/ Deactivates, deallocates, and un-childs ProcNum and all its children
/ Modifies RG0-5 and FLG
/ When threads are added, assuming there is a parent, if parent HLB is equal, don't deallocate
#Terminate  %ProcNum, IsStart?% = {
	PSH 1; STR RA SP 0
	
	/ Get the main word in RG3 (and actual index in RG2)
	MOV RG2 RG0; ALI MUL RG2 >PROC_WORDS
	LOD RG3 RG2 >ProcList
	
	/ If not start, try to call Terminate on sibling
	PAS RG1; JIF EQZ >Ter.Start
		/ Call Terminate on sibling procs (if they exist)
		LDI RG4 >SIB_MASK; ALF AND RG4 RG3; JIF EQZ >Ter.Start
			PSH 2; STR RG2 SP 0; STR RG3 SP 1
			ALI SRB RG4 >SIB_SHIFT; MOV RG0 RG4; CAL >Terminate
			LOD RG2 SP 0; LOD RG3 SP 1; POP 2
	#Ter.Start
	
	/ If start remove process from family tree (RG1 is STILL accurate!)
	PAS RG1; JIF NEZ >Ter.NotStart
		CAL >RemoveChild
	#Ter.NotStart
	
	/ Call Terminate on child procs (if they exist)
	LDI RG4 >CHILD_MASK; ALF AND RG4 RG3; JIF EQZ >Ter.NoChild
		PSH 2; STR RG2 SP 0; STR RG3 SP 1
		MOV RG0 RG4; NUL RG1; CAL >Terminate
		LOD RG2 SP 0; LOD RG3 SP 1; POP 2
	#Ter.NoChild
	
	/ Deactivate the proc
	ALI UST RG3 >PROC_ACTIVE_BIT; STR RG3 RG2 >ProcList
	
	/ Get HLB
	ALI DIV RG2 >PROC_WORDS
	ALI MUL RG2 >STATE_REG_COUNT; ALI ADD RG2 >HLB_OFFSET
	LOD RG0 RG2 >StateList
	
	/ Get size & start bit in the BMP
	LDI RG3 >CHUNK_SIZE
	MOV RG1 RG0; ALU DIV RG1 RG3  / HI -> size
	LDI RG2 >LO_MASK; ALU AND RG0 RG2; ALI SLB RG0 >LO_SHIFT; ALU DIV RG0 RG3  / LO -> start
	
	/ Call UnmarkBits(Start, Size)
	CAL >UnmarkBits
	
	/ Decrement ProcCount
	ZRO RG0; LOD RG0 RG0 >ProcCount
	DEC RG0; STR RG0 RG0 >ProcCount
	
	/ Return
	LOD RA SP 0; POP 1
	RET
}



/ Syscall handler.
#SysHandler  %!Fn% = {

	/ Get the proc's RG0 and RG1
	LDI RG2 >TState; LOD RG1 RG2 0; LOD RG0 RG2 1
	
	/ Check if it's GiveUpTurn
	CMI RG1 >SYSCODE_GIVEUPTURN; JEQ >BurstOver
	
	/Store off the rest of the registers
	LDI RG0 >TState
	STR RG3 RG0 3
	STR RG4 RG0 4
	STR RG5 RG0 5
	STR RG6 RG0 6
	STR RG7 RG0 7
	/ FLG is already stored
	STR SP RG0 >SP_OFFSET
	ZRO SP
	
	/ Check if it's one of the load syscalls
	CMI RG1 >SYSCODE_LOADTSFS; JEQ >SysSpawnProg
	CMI RG1 >SYSCODE_LOAD; JEQ >SysSpawnProg
	
	/ Else, return SYSCODE_ERROR
	LDI RG1 >SYSCODE_ERROR; STR RG1 RG0 6; JMP >ResumeProc
}



/ Loads the program, makes it a child thread, then resumes the current process, setting OUT accordingly.
/ RG1 needs to be the sys code, and RG0 needs to be the file number (if necessary)
#SysSpawnProg  %!Fn% = {
	MOV RG4 RG1; MOV RG5 RG0
	
	/ Before doing anything, make sure we can actually spawn a process
	ZRO RG0; LOD RG0 RG0 >ProcCount; LDI RG1 >MAX_PROC_COUNT
	CMP RG0 RG1; JGE >SSP.MaxError
	
	/ Get FLG and check if it's configured properly
	LDI RG0 >TState; LOD RG1 RG0 >FLG_OFFSET
	LDI RG2 >IOP_GROUP_MASK; ALU AND RG2 RG1; ALI SRB RG2 >IOP_GROUP_SHIFT
	CMI RG2 >DRIVE_IOP_GROUP; JNE >SSP.FLGError

	/ Check if FLG is looking at the root drive
	AIN SRB RG1 >IOP_DEVICE_SHIFT; JIF NEZ >SSP.NotPriv
		/ Check if this is a user process
		MOV RG3 FLG; ALI AND RG3 >EXC_MASK; AIF SRB RG3 >UE_PU_SHIFT
		JIF EQZ >SSP.PrivError
	#SSP.NotPriv
	
	
	/ Check which load function we're calling, and set FLG then jump
	CMI RG4 >SYSCODE_LOADTSFS; JNE >SSP.NotTSFS
		LDI RA >SSP.Ret; MOV RG0 RG5; MOV FLG RG1; JMP >LoadProgramTSFS
	#SSP.NotTSFS
		/ Else, it's just the normal loadprogram syscode
		MOV FLG RG1; CAL >LoadProgram
	#SSP.Ret
	
	AIN ADD OUT 1; JIF CAR >SSP.MemError
	AIN SUB OUT 1; JIF LTZ >SSP.FileMissingError
	
	/ Now spawn the thread for the program-turned-process
	LDI FLG >USER_PROC_FLG
	MOV RG0 OUT
	CAL >MakeChildThread
	
	/ Success
	LDI OUT >SYS_SPAWN_PROG_GOOD; JMP >SSP.Finalize
	/ Fails
	#SSP.MaxError
	LDI OUT >SYS_SPAWN_PROG_MAX; JMP >SSP.Finalize
	#SSP.PrivError
	LDI OUT >SYS_SPAWN_PROG_PRIV; JMP >SSP.Finalize
	#SSP.MemError
	LDI OUT >SYS_SPAWN_PROG_MEM; JMP >SSP.Finalize
	#SSP.FLGError
	LDI OUT >SYS_SPAWN_PROG_FLG; JMP >SSP.Finalize
	#SSP.FileMissingError
	LDI OUT >SYS_SPAWN_PROG_MISSING
	
	/ Set current proc's OUT accordingly & resume it
	#SSP.Finalize
	LDI RG0 >TState; STR OUT RG0 6
	JMP >ResumeProc
}



/ Resume the current process *NOT A FUNCTION*
#ResumeProc  %!Fn% = {
	/ Restore the temp state
	LDI RG0 >TState
	LOD SP RG0 >SP_OFFSET
	LOD FLG RG0 >FLG_OFFSET
	LOD RG7 RG0 7
	LOD RG6 RG0 6
	LOD RG5 RG0 5
	LOD RG4 RG0 4
	LOD RG3 RG0 3
	LOD RG2 RG0 2
	LOD RG1 RG0 1
	LOD RG0 RG0 0
	
	/ Resume the process
	RSM
}



/ Creates child thread for current proc with given HLB and FLG
/ Modifies RG0-5 and FLG
#MakeChildThread  %NewHLB w/ FLG > ProcNum% = {
	PSH 1; STR FLG SP 0
	
	/ Find inactive thread
	NUL RG1
	#MCT.Search
		INC RG1
		MOV RG2 RG1; ALI MUL RG2 >PROC_WORDS; LOD RG3 RG2 >ProcList
	AIN SET RG3 >PROC_ACTIVE_BIT; JIF CAR >MCT.Search
	
	/ Activate and zero out thread number RG1
	ZRO RG3; ALI SET RG3 >PROC_ACTIVE_BIT; STR RG3 RG2 >ProcList
	
	/ Increment ProcCount
	ZRO RG2; LOD RG2 RG2 >ProcCount
	INC RG2; STR RG2 RG2 >ProcCount
	
	
	/ Get the location of its state in RG2
	MOV RG2 RG1; ALI MUL RG2 >STATE_REG_COUNT
	LDI RG3 >StateList; ALU ADD RG2 RG3
	
	/ Zero out all registers except FLG and HLB
	ZRO RG3
	STR RG3 RG2 0
	STR RG3 RG2 1
	STR RG3 RG2 2
	STR RG3 RG2 3
	STR RG3 RG2 4
	STR RG3 RG2 5
	STR RG3 RG2 6
	STR RG3 RG2 7
	STR RG3 RG2 >EPC_OFFSET
	STR RG3 RG2 >SP_OFFSET
	
	/ Set FLG and HLB
	LOD RG3 SP 0
	STR RG3 RG2 >FLG_OFFSET
	STR RG0 RG2 >HLB_OFFSET
	
	
	/ InsertChild(ThisProcNum) and return to RA
	MOV RG0 RG1
	MOV OUT RG0; POP 1
	JMP >InsertChild
}



/ Adds the given process as a child to the current process
/ Modifies RG1-4, and FLG
#InsertChild  %ProcNum% = {

	/ Quick check if it's root
	PAS RG0; JIF EQZ >InC.Skip
	
	/ Get the main word of ProcNum in RG2 (and actual index in RG1)
	MOV RG1 RG0; ALI MUL RG1 >PROC_WORDS; LOD RG2 RG1 >ProcList
	
	/ Zero out the parent and sib
	LDI RG3 >SIB_MASK; ALU NOT RG3 RG3; ALU AND RG2 RG3
	LDI RG3 >PARENT_MASK; ALU NOT RG3 RG3; ALU AND RG2 RG3
	
	/ Set parent to CurrentProcID and store the main word
	ZRO RG3; LOD RG3 RG3 >CurrentProcID
	MOV RG4 RG3; ALI SLB RG4 >PARENT_SHIFT
	ALU OR RG2 RG4; STR RG2 RG1 >ProcList
	
	/ Get the current proc's main word in RG2 (and actual index in RG3) (RG1&4 are not set)
	ALI MUL RG3 >PROC_WORDS; LOD RG2 RG3 >ProcList
	
	/ Check if current proc has children
	LDI RG1 >CHILD_MASK; ALF AND RG1 RG2; JIF NEZ >InC.FindLastSib
		/ Case 1: current proc has no children
		ALU OR RG2 RG0; STR RG2 RG3 >ProcList
		RET
		
	/ Case 2: current proc has children
	/ Loop through siblings to find the endpoint
	#InC.FindLastSib
		/ Actual index in RG1, main word in RG2
		ALI MUL RG1 >PROC_WORDS; LOD RG2 RG1 >ProcList
		LDI RG3 >SIB_MASK; ALF AND RG3 RG2; JIF EQZ >InC.FoundLast
		ALI SRB RG3 >SIB_SHIFT; MOV RG1 RG3; JMP >InC.FindLastSib
	#InC.FoundLast
	
	/ Set proc as sibling of last sib and we're done
	MOV RG3 RG0; ALI SLB RG3 >SIB_SHIFT
	ALU OR RG2 RG3; STR RG2 RG1 >ProcList
	#InC.Skip
	RET
}



/ (ProcNum) removes the given process as a child from the process tree
/ Does not alter the proc's main word
/ Modifies RG1-4 and FLG
#RemoveChild  %ProcNum% = {

	/ Case 1 - Proc is root, nothing to do
	PAS RG0; JIF EQZ >ReC.Done
	
	/ Get the process word in RG1
	MOV RG1 RG0; ALI MUL RG1 >PROC_WORDS; LOD RG1 RG1 >ProcList
	
	/ Get the parent's main word in RG3 (and actual index in RG2)
	LDI RG2 >PARENT_MASK; ALU AND RG2 RG1; ALI SRB RG2 >PARENT_SHIFT
	ALI MUL RG2 >PROC_WORDS; LOD RG3 RG2 >ProcList
	
	/ Check if the process is the first child
	LDI RG4 >CHILD_MASK; ALU AND RG4 RG3
	CMP RG4 RG0; JNE >ReC.IsSibling
		
		/ Case 2 - Proc is the first child, set parent's child id to proc's sib id
		LDI RG4 >CHILD_MASK; ALU NOT RG4 RG4; ALU AND RG3 RG4
		LDI RG4 >SIB_MASK; ALU AND RG4 RG1; ALI SRB RG4 >SIB_SHIFT  / Get child in RG4
		ALU OR RG3 RG4; STR RG3 RG2 >ProcList
		RET
		
	#ReC.IsSibling
	/ Case 3 - Proc is a sibling, "bridge" over the process
	
	/ Get the main word of the sibling in RG3 (and actual index in RG2)
	LDI RG2 >CHILD_MASK
	
	#ReC.SibLoop
		ALU AND RG2 RG3
		ALI MUL RG2 >PROC_WORDS; LOD RG3 RG2 >ProcList
		LDI RG4 >SIB_MASK; ALU AND RG4 RG3; ALI SRB RG4 >SIB_SHIFT
		CMP RG4 RG0; JEQ >ReC.FoundSib
		MOV RG2 RG4; JMP >ReC.SibLoop
	#ReC.FoundSib
	
	/ Found the sibling, bridge over the process
	LDI RG4 >SIB_MASK; ALU AND RG1 RG4; ALI SRB RG1 >SIB_SHIFT
	ALU NOT RG4 RG4; ALU AND RG3 RG4
	ALU OR RG3 RG1; STR RG3 RG2 >ProcList
	
	#ReC.Done
	RET
}



/ Loads the program file at IOP into memory. Returns HLB, NULL if no space, or 0 no file.
/ Does not create the thread for said program, but does basically everything else.
/ Modifies RG0-5, and FLG
#LoadProgramTSFS  %FileNum w/ IOP > NewHLB|NULL|0% = {

	PSH 2; STR RA SP 0
	
	
	% Unused drive format check code:
	
	/ First, check if it's TSFS (These checks really don't take much time thanks to how IO is handled)
	
	/ Quick "parity check"
	MOV RG2 IO; AIN MOD RG2 >TSFS_ENTRY_SIZE; JIF NEZ >LPF.TSFSError
	
	/ Longer, "zero check"
	#LPF.ZLoop
		/ Get the pointer to the end of the drive.
		ALI SUB RG2 >TSFS_ENTRY_SIZE
		ALI SET FLG >DRIVE_PTR_BIT; MOV IO RG2; ALI UST FLG >DRIVE_PTR_BIT
		MOV RG1 IO; PAS RG1; JIF EQZ >LPF.ZLoop
	/ Got the address for end of memory.
	MOV RG2 RG1
	
	/ Just make sure this actually is the pointer.
	PAS IO; JIF NEZ >LPF.TSFSError
	
	/ Now check to see if it's (probably) the end of memory.
	ALI SET FLG >DRIVE_PTR_BIT; MOV IO RG2; ALI UST FLG >DRIVE_PTR_BIT
	PAS IO; JIF NEZ >LPF.TSFSError
	%
	
	
	/ Check if the given file number actually exists
	ALI MUL RG0 >TSFS_ENTRY_SIZE
	ZRO RG1; ALI SET FLG >DRIVE_PTR_BIT; MOV IO RG1; ALI UST FLG >DRIVE_PTR_BIT
	MOV RG1 IO; CMP RG0 RG1; JGE >LPF.FileError
	
	/ Check if the file is empty
	ALI SET FLG >DRIVE_PTR_BIT; MOV IO RG0; ALI UST FLG >DRIVE_PTR_BIT
	MOV RG0 IO; PAS IO; JIF EQZ >LPF.FileError
	
	/ Tell LoadProgram where to load this file.
	STR RG0 SP 1; JMP >LoP.LPFSkip
	
	
	#LPF.FileError
	ZRO OUT; POP 2; RET
	
	
/ LPF, but for .tload drives
#LoadProgram  %w/ IOP > NewHLB|NULL% = {

	PSH 2; STR RA SP 0; ZRO RG0; STR RG0 SP 1
	#LoP.LPFSkip
	
	/ Calculate the size of the program in RG0 (in chunks)
	ALI SET FLG >DRIVE_PTR_BIT; MOV IO RG0; ALI UST FLG >DRIVE_PTR_BIT
	MOV RG0 IO
	LDI RG1 >CHUNK_SIZE; ALU DIV RG0 RG1; ALI ADD RG0 2
	
	/ Check memory to see where it will fit
	CAL >FindOpenMemory  / = FirstChunk
	AIN ADD OUT 1; JIF CAR >LoP.Error
	
	/ Calculate HLB then do MarkBits(FirstChunk, Size)
	MOV RG1 RG0; MOV RG0 OUT
	
	LDI RG2 >CHUNK_SIZE; ALU MUL OUT RG2; ALI SRB OUT >LO_SHIFT
	MOV RG3 RG1; ALU MUL RG3 RG2; ALU OR OUT RG3
	
	CAL >MarkBits
	
	/ Load program into memory using LoadFile(CHUNK_SIZE * FirstChunk, Size)
	LOD RG1 SP 1
	LDI RG2 >CHUNK_SIZE; ALU MUL RG0 RG2
	ALI SET FLG >DRIVE_PTR_BIT; MOV IO RG1; ALI UST FLG >DRIVE_PTR_BIT; MOV RG1 IO
	
	LOD RA SP 0; POP 2; JMP >LoadFile	/ This is the last function call, so return to RA
	
	/ Unless there was an error, then return NULL
	#LoP.Error
	NUL OUT; LOD RA SP 0; POP 2; RET
}}



/ Loads a file at IOP into memory
/ IMPORTANT: DOES NOT MARK THE BITMAP
/ Modifies Rg0 Rg1 and FLG
#LoadFile  %MemStart, Size w/ IOP & DrivePTR% = {

	/ Write the file to memory
	PAS RG1; JIF EQZ >LoF.Done
	#LoF.LoadLoop
		STR IO RG0 0
		INC RG0
	DCC RG1; JIF NEZ >LoF.LoadLoop
	
	/ Finally, return
	#LoF.Done
	RET
}



/ Returns the number of the first 0 bit, or NULL if none are found
/ Modifies RG1-5, and FLG
#FindOpenMemory  %Size > FirstChunkNum|NULL% = {
	/ RG1: Current bitwise index
	/ RG2: Relative bitwise index to RG1
	/ RG3: Current word
	/ RG4: WORD_SIZE
	/ RG5: Temp register
	/ RG6: Temp register
	ZRO RG1; LOD RG3 RG1 >MallocBMPs; LDI RG4 >WORD_SIZE
	
	#FOM.Loop
		/ If current bit (calculate in RG5) is 0, start the inner loop
		MOV RG5 RG1; ALU MOD RG5 RG4
		AFN SET RG3 RG5; JIF CAR >FOM.Not0
			
			/ Set up RG2 as relative index, and
			/ RG5: current actual index
			LDI RG2 1
			MOV RG5 RG1; ALU ADD RG5 RG2
			#FOM.InLoop
				/ If RG0 number of 0's were found, we're done
				CMP RG2 RG0; JEQ >FOM.Success
				
				/ If not, check if we need to go to the next word for the next bit
				AFN MOD RG5 RG4; JIF NEZ >FOM.SameWord
					/ Not the same word, so grab the new one.
					MOV RG6 RG5; ALU DIV RG6 RG4; ALI MOD RG6 >BMP_WORDS
					LOD RG3 RG6 >MallocBMPs
				#FOM.SameWord
				
				/ Now check the next bit
				MOV RG6 RG5; ALU MOD RG6 RG4
				AFN SET RG3 RG6; JIF CAR >FOM.Hit1
				
			/ If it's 0, increment RG5 and RG2
			INC RG5; INC RG2; JMP >FOM.InLoop
				
			/ Else, if it's 1, exit the loop
			#FOM.Hit1
			MOV RG1 RG5  / Update RG1 to be accurate (it will then increment past the 1)
			
		#FOM.Not0
		
		/ Increment the current index, and check if it's over the total bits
		INC RG1; LDI RG5 >NUM_CHUNKS; CMP RG5 RG1; JLT >FOM.NoSpace
		
		/ If not, get the next word if needed and loop
		AFN MOD RG1 RG4; JIF NEZ >FOM.Loop
		MOV RG5 RG1; ALU DIV RG5 RG4; LOD RG3 RG5 >MallocBMPs  / Get next word
	JMP >FOM.Loop
	
	#FOM.Success
	MOV OUT RG1; RET
		
	#FOM.NoSpace
	NUL OUT; RET
}



/ Turns on bits Start through Start+Size-1 inclusive
/ Modifies RG1-5, and FLG
#MarkBits  %Start, Size% = {
	/ Setup and jump to ModifyBits
	ZRO RG2; LOD RG2 RG2 >MarkInst; STR RG2 RG2 >MoB.ModBit
	JMP >ModifyBits
}

/ Turns off bits Start through Start+Size-1 inclusive
/ Modifies RG1-5, and FLG
#UnmarkBits  %Start, Size% = {
	/ Setup and jump to ModifyBits
	ZRO RG2; LOD RG2 RG2 >UnmarkInst; STR RG2 RG2 >MoB.ModBit
	JMP >ModifyBits
}

/ Shell function for UnmarkBits and MarkBits DO NOT CALL
#ModifyBits  %!Fn% = {
	/ RG2 is WORD_SIZE, RG3 is word num, RG4 is bits, RG5 is the word itself
	LDI RG2 >WORD_SIZE
	MOV RG3 RG0; ALU DIV RG3 RG2
	LOD RG5 RG3 >MallocBMPs
	MOV RG4 RG0; ALU MOD RG4 RG2
	
	/ Now loop through the bitmap and unset bits
	#MoB.Loop
		/ Modify the bit
		#MoB.ModBit:NOP  / ALU SET RG5 RG4 or ALU UST RG5 RG4
		
		/ Goto the next bit (unless we're at the end, or end of word)
		INC RG4; DCC RG1; JIF EQZ >MoB.Done
		ALF MOD RG4 RG2; JIF NEZ >MoB.Loop
		
		/ If at the end of word, store the word and get the next one
		STR RG5 RG3 >MallocBMPs; INC RG3; ALI MOD RG3 >BMP_WORDS
		LOD RG5 RG3 >MallocBMPs
		JMP >MoB.Loop
	#MoB.Done
	
	/ Now that we're done, update the last word and return
	STR RG5 RG3 >MallocBMPs
	RET
}



/ The end of the OS's code segment in memory
#OSEndPoint
