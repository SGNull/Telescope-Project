		=====================
--------TBOS v2 Optimizations--------
		=====================
		
Running the "Multiprogramming Test" programs.

Test input string: "Hi!$"
	Old Version (base 2.0): 		6074 cycles
	MaxProcID optimization: 		4593 cycles
	ProcSupportList addition (2.1):	4506 cycles
	
Test input string: "Hello World!$"
	Old Version (base 2.0): 		14219 cycles
	MaxProcID optimization: 		9219  cycles
	ProcSupportList addition (2.1):	8943  cycles


I was able to find perfect solutions for cycles/character (including $) using Desmos.
Check it out here: https://www.desmos.com/calculator/zc7glocjgo

x is the number of characters, and f(x) gives the exact number of cycles it would take to execute.
	Old Version (base 2.0):
		f(x) = 905x + 2454

		2454 cycles to start and stop no matter what:
			Not including boot
			Including Main's negligable initial time spent syscalling
			Including OS startup time
			Including OS loading program time
			Including OS shutdown time

		905 cycles per character:
			Including Dispatcher loop time
			Including negligable time spent reading/writing/waiting by programs
			Including ExHandler and Dispatcher loading and storing proc states
	
	
	MaxProcID optimization:
		f(x) = 514x + 2537
		
		2537 cycles is our new base amount of cycles.
			Very very good! Only a minor, negligable increase!
		
		514 cycles per character.
			This is huge! Nearly halved!
	
	
	ProcSupportList optimization (2.1):
		f(x) = 493x + 2534
		
		2534 is the new base amount of cycles.
			Decreased! That's really good!
		
		493 cycles per character.
			Not a huge improvement, but still an improvement!

	I have a hunch that the optimizations made will be more noticeable in different tests besides just this one.



		=======================
--------Stack Usage TBOS Update--------
		=======================

Multiprogramming Test:

	Pre-change:
		"Hi!$"			- 4530 cycles
		"Hello!$"		- 6018 cycles
		"Hello World!$"	- 8994 cycles

		Solution (x is chars, f(x) is cycles):
		f(x) = 496x + 2546
		
		
	Post-change:
		"Hi!$"			- 5181 cycles
		"Hello!$"		- 6669 cycles
		"Hello World!$"	- 9645 cycles

		Solution:
		f(x) = 496x + 3197
	
		Interesting. It has not increased the cycles per character at all, and has increased the base OS time by about 25%. Not tooooo bad in this particular test, but perhaps really bad in the long run? Is tech debt worth the speedup in OS related functions? I leaning towards no, especially with how far this OS has come.


Comprehensive Threading Test:

	Pre-change  - 35388 cycles
	
	Post-change - 38554 cycles
	
	So a 9% increase in cycles. Hmmmmm, I'm really not sure if that's acceptable or not? Right now it's just a test, but in the future it could mean serious slowdowns depending on how much programs are relying on the OS.


Small Threading Test:

	Pre-change  - 26765 cycles
	
	Post-change - 28025 cycles
	
	So about a 5% increase.
	

I'm just not liking these numbers. It's not like it's a 100% increase, but 5%, 9%, 25% in specific cases, that adds up over time. Think about some set of programs that take a total of 1,000,000 cycles to run. Let's say we have on average a 13% increase in cycles, then that's an extra 130,000 cycles that need to be executed. The only upside is that the dispatcher is unaffected (as demonstrated by the Multiprogramming Test results), but just about everything else is.



		==================
--------TASL 5 TBOS Update--------
		==================
Multiprogramming Test:

	"Hi!$"			- 4627 cycles
	"Hello!$"		- 6115 cycles
	"Hello World!$"	- 9091 cycles

	Solution (x is chars, f(x) is cycles):
	f(x) = 496x + 2643
	
	Pre-Stack:
	f(x) = 496x + 2546
	
	Post-Stack:
	f(x) = 496x + 3197
	
	Barely any difference! Good!


Comprehensive Threading Test:

	35916 cycles
	
	Pre-Stack:
	35388 cycles
	
	Post-Stack:
	38554 cycles
	
	Not much change at all.


Small Threading Test:

	27012 cycles
	
	Pre-Stack:
	26765 cycles
	
	Post-Stack:
	28025 cycles
	
	Again, not much change.
	

In total, we have about a 3.8% increase in base OS cycle usage, 1.5% increase in CTT cycle usage, and 0.9% increase in STT cycle usage, as opposed to 25%, 9%, and 5% respectively.



		================
--------TBOS v2.3 Update--------
		================

Multiprogramming Test:

	"Hi!$"			- 4530 cycles
	"Hello!$"		- 6018 cycles
	"Hello World!$"	- 8994 cycles
	
	Solution: f(x) =  496x + 2546 		3.8% decrease in base cycles
	
Comprehensive Threading Test: 35381 	1.5% decrease in cycles

Small Threading Test: 26563 			1.7% decrease in cycles

Wow, I'm kind of surprised, but I did implement a few optimizations as I was rewriting stuff. Also, the coefficient of the Multiprogramming Test solution has become much less applicable as time has gone on. Now with the new code to simulate I/O interrupts


