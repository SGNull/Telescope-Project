Running the "Multiprogramming Test" programs.

Test input string: "Hi!$"
	Old Version (base 2.0): 		6074 cycles
	MaxProcID optimization: 		4593 cycles
	ProcSupportList addition (2.1):	4506 cycles
	
Test input string: "Hello World!$"
	Old Version (base 2.0): 		14219 cycles
	MaxProcID optimization: 		9219  cycles
	ProcSupportList addition (2.1):	8943


I was able to find perfect solutions for cycles/character (including $) using Desmos.
Check it out here: https://www.desmos.com/calculator/zc7glocjgo

x is the number of characters, and f(x) gives the exact number of cycles it would take to execute.
	Old Version (base 2.0):
		f(x) = 905x + 2454

		2454 cycles to start and stop no matter what:
			Not including boot
			Including Main's negligable initial time spent syscalling
			Including OS startup time
			Including OS loading program time
			Including OS shutdown time

		905 cycles per character:
			Including Dispatcher loop time
			Including negligable time spent reading/writing/waiting by programs
			Including ExHandler and Dispatcher loading and storing proc states
	
	
	MaxProcID optimization:
		f(x) = 514x + 2537
		
		2537 cycles is our new base amount of cycles.
			Very very good! Only a minor, negligable increase!
		
		514 cycles per character.
			This is huge! Nearly halved!
	
	
	ProcSupportList optimization (2.1):
		f(x) = 493x + 2534
		
		2534 is the new base amount of cycles.
			Decreased! That's really good!
		
		493 cycles per character.
			Not a huge improvement, but still an improvement!
	
	I have a hunch that the optimizations made will be more noticeable in different tests besides just this one.
	