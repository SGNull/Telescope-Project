/ Sets up the environment for the OS
Init:
	Erase Bootloader from memory
	Mark OS chunks in memory bitmap
	Load Root as PID 0 from ROOTPROCDRIVE using SpawnProc
		If returns 0, something's really wrong.
	Goto Dispatcher



/ Dispatches the next process
Dispatcher:
	Get CurrentPID
	Increment CurrentPID
	Mod CurrentPID by MAXPROCCOUNT
						<<This is where semaphore checks will go in the future
	Get State = StateList[CurrentPID]
	LoadState(State)
	RSM



/ Creates a brand new proc from a program stored in a drive somewhere.
/ In v1.0, this assumes IOP is the drive and that the drive is load formatted
SpawnProc:
	get ProcCount
	if ProcCount == MaxProcCount:
		return 0

	get ProgSize from IO
	Chunks = ProgSize/ChunkSize
		if carry, Chunks++

	start bit = current bit
	#Check
	check current bit, if 1: 
		current++
		if new current bit is start bit, return 0
		goto >Check
		
	for (i=0; i<Chunks; i++){
		if bit current+i == 1, goto >Check	<< Some optimizing needs to be done here, while still cmp with start bit
							^^ Maybe we could just use a counter instead of cmp with start bit
	}

	for (i=0; i<Chunks; i++){
		set bit current+i to 1
	}
	
	use current bit to get LO value

	TotalProcs++
	insert NewProc as child into CurrentProc
	initialize State & PCB

	for (ProgSize){write I/O to StartAddress+Index}

	return 1



/ An "anti-dispatcher"
/ run when a process is done with its burst
ProcDone:
	Get CurrentPID
	Copy TempState (TempF, Temp0, Temp1) into CPU
	Copy CPU State Registers into States[CurrentPID]

	/ Total proc time calculation & storing should go somewhere here in the future

	Goto Dispatcher



/ The entry-point back into the OS from a running proc
/ This is what EXA is always set to
ExceptionHandler:
	Copy FLG into TempF
	Copy RG0 into Temp0
	Copy RG1 into Temp1
	Branch according to FLG.EXC
		=> If CTD, goto ProcDone	<< Not a function call
		=> If SYS, SpawnProc()
		=> Else, TerminateProc(CurrentProcID)
	goto ResumeProc



ClearMem(Start, Size)
	Get top 2 bits of Start
	That is the bmpWord to look at
	Get rest of bits
	That is realStart
	for (i = realStart; i < Size; i++)
		Turn off bit i in bmpWord



/ Resumes the current process
ResumeProc:
	/ NOTE: Like in ProcDone, this code may not look like this, because it might be inefficient
	Get TempState
	LoadState(TempState)
	RSM



/ Terminates the current process
/ >Recursively< terminates all child procs
TerminateProc:
	if ChildProcID != 0:
		TerminateProc(ChildProcID)
	if SibProcID != 0:
		TerminateProc(SibProcID)

	get LO and HI
	mark memory as unused		<< This is not going to work for threads!!! Maybe add an extra PCB boolean for threads
					^^ This is kinda bad for increasing MaxProc to 32.
	
	set CurrentPCB.active = False

	ParentPCB = CurrentPCB.parent
	set ParentPCB.child = CurrentPCB.sib

	ProcCount--