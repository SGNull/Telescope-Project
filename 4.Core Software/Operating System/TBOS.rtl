NOTE: DESPITE THEIR APPEARANCE, RTL FILES CANNOT BE ASSEMBLED
JMP
>Init
0x0000
0x0000
0x0000
0x0000
0x0000
0x0000
0x0000
0x0000
0x0000
0x0000
0x0000
0x0000
0x0000
0x0000
0x0000
0x0000
0
0
0x0000
0x0000
0x0000
0x0000
0x0000
0x0000
0x0000
0x0000
0x0000
0x0000
0x0000
0x0000
0x0000
0x0000
0x0000
0x0000
0x0000
0x0000
0x0000
0x0000
0x0000
0x0000
0x0000
0x0000
0x0000
0x0000
0x0000
0x0000
0x0000
0x0000
0x0000
0x0000
0x0000
0x0000
0x0000
0x0000
0x0000
0x0000
0x0000
0x0000
0x0000
0x0000
0x0000
0x0000
0x0000
0x0000
0x0000
0x0000
0x0000
0x0000
0x0000
0x0000
0x0000
0x0000
0x0000
0x0000
0x0000
0x0000
0x0000
0x0000
0x0000
0x0000
0x0000
0x0000
0x0000
0x0000
0x0000
0x0000
0x0000
0x0000
0x0000
0x0000
0x0000
0x0000
0x0000
0x0000
0x0000
0x0000
0x0000
0x0000
0x0000
0x0000
0x0000
0x0000
0x0000
0x0000
0x0000
0x0000
0x0000
0x0000
0x0000
0x0000
0x0000
0x0000
0x0000
0x0000
0x0000
0x0000
0x0000
0x0000
0x0000
0x0000
0x0000
0x0000
0x0000
0x0000
0x0000
0x0000
0x0000
0x0000
0x0000
0x0000
0x0000
0x0000
0x0000
0x0000
0x0000
0x0000
0x0000
0x0000
0x0000
0x0000
0x0000
0x0000
0x0000
0x0000
0x0000
0x0000
0x0000
0x0000
0x0000
0x0000
0x0000
0x0000
0x0000
0x0000
0x0000
0x0000
0x0000
0x0000
0x0000
0x0000
0x0000
0x0000
0x0000
0x0000
0x0000
0x0000
0x0000
0x0000
0x0000
0x0000
0x0000
0x0000
0x0000
0x0000
0x0000
0x0000
0x0000
0x0000
0x0000
0x0000
0x0000
0x0000
0x0000
0x0000
0x0000
0x0000
0x0000
0x0000
0x0000
0x0000
0x0000
0x0000
0x0000
0x0000
0x0000
0x0000
0x0000
0x0000
0x0000
0x0000
0x0000
0x0000
0x0000
0x0000
0x0000
0x0000
0x0000
0x0000
0x0000
0x0000
0x0000
0x0000
0x0000
0x0000
0x0000
0x0000
0x0000
0x0000
0x0000
0x0000
0x0000
0x0000
0x0000
0x0000
ALU SET RG5 RG4
ALU UST RG5 RG4
LDI RG0
>START_CODE
LDI FLG
>PC_STATUS_IOP
MOV IO RG0
ZRO RG0
ZRO RG1
LDI RG2
>ENDLOAD
DEC RG1
LOD RG3 RG1
0
STR RG0 RG1
0
CMP RG3 RG2
JNE
>Ini.CleanLoop
LDI RG1
>OSEndPoint
LDI RG0
>CHUNK_SIZE
ALU DIV RG1 RG0
ALI ADD RG1 1
LDI RG0
>NUM_CHUNKS
ALI SUB RG0 1
MOV RA PC
ALI ADD RA 4
JIF TRU
>MarkBits
LDI FLG
>ROOT_DRIVE_IOP
MOV RA PC
ALI ADD RA 4
JIF TRU
>LoadProgram
AIN ADD OUT 1
JIF NCR
>Ini.OK
LDI RG0
>BAD_START_ERROR
JMP
>StatusHalt
LDI RG0
1
STR RG0 RG0
>ProcCount
MOV RG0 OUT
LDI FLG
>ROOT_PROC_FLG
MOV RA PC
ALI ADD RA 4
JIF TRU
>MakeChildThread
LDI RG0
>RUN_CODE
LDI FLG
>PC_STATUS_IOP
MOV IO RG0
JMP
>Dispatcher
LDI FLG
>PC_STATUS_IOP
MOV IO RG0
HLT
ZRO RG0
LOD RG0 RG0
>ProcCount
PAS RG0
JIF EQZ
>Dis.Done
ZRO RG0
LOD RG0 RG0
>CurrentProcID
INC RG0
LDI RG1
>MAX_PROC_COUNT
ALU MOD RG0 RG1
MOV RG1 RG0
LDI RG2
>PROC_WORDS
ALU MUL RG1 RG2
LOD RG1 RG1
>ProcList
AIN SET RG1 >PROC_ACTIVE_BIT
JIF NCR
>Dis.GetNext
ALI MUL RG0 >STATE_REG_COUNT
LDI RG1
>StateList
ALU ADD RG0 RG1
LOD EPC RG0
>EPC_OFFSET
LOD HLB RG0
>HLB_OFFSET
LOD FLG RG0
>FLG_OFFSET
LOD SP RG0
>SP_OFFSET
LOD RG7 RG0
7
LOD RG6 RG0
6
LOD RG5 RG0
5
LOD RG4 RG0
4
LOD RG3 RG0
3
LOD RG2 RG0
2
LOD RG1 RG0
1
LOD RG0 RG0
0
RSM
LDI RG0
>END_CODE
JMP
>StatusHalt
ZRO RG0
LOD RG0 RG0
>CurrentProcID
ALI MUL RG0 >STATE_REG_COUNT
LDI RG1
>StateList
ALU ADD RG0 RG1
LDI RG1
>TState
LOD RG2 RG1
0
STR RG2 RG0
0
LOD RG2 RG1
1
STR RG2 RG0
1
LOD RG2 RG1
2
STR RG2 RG0
2
LOD RG2 RG1
>FLG_OFFSET
STR RG2 RG0
>FLG_OFFSET
STR RG3 RG0
3
STR RG4 RG0
4
STR RG5 RG0
5
STR RG6 RG0
6
STR RG7 RG0
7
STR SP RG0
>SP_OFFSET
STR EPC RG0
>EPC_OFFSET
JMP
>Dispatcher
LDI RG0
>TState
LOD SP RG0
>SP_OFFSET
LOD FLG RG0
>FLG_OFFSET
LOD RG7 RG0
7
LOD RG6 RG0
6
LOD RG5 RG0
5
LOD RG4 RG0
4
LOD RG3 RG0
3
LOD RG2 RG0
2
LOD RG1 RG0
1
LOD RG0 RG0
0
RSM
STR RG0 RG0
>TState
LDI RG0
>TState
STR RG1 RG0
1
STR RG2 RG0
2
STR FLG RG0
>FLG_OFFSET
LDI RG0
>EXC_MASK
ALU AND RG0 FLG
ALI SRB RG0 >EXC_SHIFT
CMI RG0 >EXC_CTDZ
JEQ
>BurstOver
CMI RG0 >EXC_PRIV
JEQ
>TerminateCurrent
CMI RG0 >EXC_OOB
JEQ
>TerminateCurrent
LDI RG0
>TState
STR RG3 RG0
3
STR RG4 RG0
4
STR RG5 RG0
5
STR RG6 RG0
6
STR RG7 RG0
7
STR SP RG0
>SP_OFFSET
ZRO SP
LDI RG0
>EXC_MASK
ALU AND RG0 FLG
ALI SRB RG0 >EXC_SHIFT
CMI RG0 >EXC_SYS
JEQ
>SysSpawnProg
LDI RG0
>UNKNOWN_EXC_ERROR
JMP
>StatusHalt
ZRO RG0
LOD RG0 RG0
>CurrentProcID
NUL RG1
LDI RA
>Dispatcher
JMP
>Terminate
PSH 1
STR RA SP
0
MOV RG2 RG0
ALI MUL RG2 >PROC_WORDS
LOD RG3 RG2
>ProcList
PAS RG1
JIF NEZ
>Ter.Start
LDI RG4
>SIB_MASK
ALF AND RG4 RG3
JIF EQZ
>Ter.Start
PSH 2
STR RG2 SP
0
STR RG3 SP
1
ALI SRB RG4 >SIB_SHIFT
MOV RG0 RG4
MOV RA PC
ALI ADD RA 4
JIF TRU
>Terminate
LOD RG2 SP
0
LOD RG3 SP
1
POP 2
PAS RG1
JIF EQZ
>Ter.NotStart
MOV RA PC
ALI ADD RA 4
JIF TRU
>RemoveChild
LDI RG4
>CHILD_MASK
ALF AND RG4 RG3
JIF EQZ
>Ter.NoChild
PSH 2
STR RG2 SP
0
STR RG3 SP
1
MOV RG0 RG4
NUL RG1
MOV RA PC
ALI ADD RA 4
JIF TRU
>Terminate
LOD RG2 SP
0
LOD RG3 SP
1
POP 2
ALI UST RG3 >PROC_ACTIVE_BIT
STR RG3 RG2
>ProcList
ALI DIV RG2 >PROC_WORDS
ALI MUL RG2 >STATE_REG_COUNT
ALI ADD RG2 >HLB_OFFSET
LOD RG0 RG2
>StateList
LDI RG3
>CHUNK_SIZE
MOV RG1 RG0
ALU DIV RG1 RG3
LDI RG2
>LO_MASK
ALU AND RG0 RG2
ALI SLB RG0 >LO_SHIFT
ALU DIV RG0 RG3
MOV RA PC
ALI ADD RA 4
JIF TRU
>UnmarkBits
ZRO RG0
LOD RG0 RG0
>ProcCount
DEC RG0
STR RG0 RG0
>ProcCount
LOD RA SP
0
POP 1
RET
ZRO RG1
LOD RG1 RG1
>ProcCount
LDI RG2
>MAX_PROC_COUNT
CMP RG1 RG2
JGE
>SSP.MaxError
INC RG1
STR RG1 RG1
>ProcCount
ZRO RG0
LOD RG0 RG0
>CurrentProcID
LDI RG1
>STATE_REG_COUNT
ALU MUL RG1 RG0
LDI RG2
>StateList
ALU ADD RG1 RG2
LOD RG2 RG1
>FLG_OFFSET
LDI RG3
>IOP_GROUP_MASK
ALU AND RG3 RG2
ALI SRB RG3 >IOP_GROUP_SHIFT
CMI RG3 >DRIVE_IOP_GROUP
JNE
>SSP.FLGError
JIF EQZ
>SSP.PrivError
MOV FLG RG2
MOV RA PC
ALI ADD RA 4
JIF TRU
>LoadProgram
AIN ADD OUT 1
JIF CAR
>SSP.MemError
LDI FLG
>USER_PROC_FLG
MOV RG0 OUT
MOV RA PC
ALI ADD RA 4
JIF TRU
>MakeChildThread
LDI OUT
>SYS_SPAWN_PROG_GOOD
JMP
>SSP.Finalize
LDI OUT
>SYS_SPAWN_PROG_MAX
JMP
>SSP.Finalize
LDI OUT
>SYS_SPAWN_PROG_PRIV
JMP
>SSP.Finalize
LDI OUT
>SYS_SPAWN_PROG_MEM
JMP
>SSP.Finalize
LDI OUT
>SYS_SPAWN_PROG_FLG
LDI RG0
>TState
STR OUT RG0
6
JMP
>ResumeProc
PSH 2
STR RA SP
0
STR FLG SP
1
NUL RG1
INC RG1
MOV RG2 RG1
ALI MUL RG2 >PROC_WORDS
LOD RG3 RG2
>ProcList
AIN SET RG3 >PROC_ACTIVE_BIT
JIF NEZ
>MCT.Search
ZRO RG3
ALI SET RG3 >PROC_ACTIVE_BIT
STR RG3 RG2
MOV RG2 RG1
ALI MUL RG2 >STATE_REG_COUNT
LDI RG3
>StateList
ALU ADD RG2 RG3
ZRO RG3
STR RG3 RG2
0
STR RG3 RG2
1
STR RG3 RG2
2
STR RG3 RG2
3
STR RG3 RG2
4
STR RG3 RG2
5
STR RG3 RG2
6
STR RG3 RG2
7
STR RG3 RG2
>EPC_OFFSET
STR RG3 RG2
>SP_OFFSET
LOD RG3 SP
1
STR RG3 RG2
>FLG_OFFSET
STR RG0 RG2
>HLB_OFFSET
MOV RG0 RG1
MOV OUT RG0
LOD RA SP
0
POP 2
JMP
>InsertChild
PSH 1
STR RA SP
0
MOV RG0 IO
LDI RG1
>CHUNK_SIZE
ALU DIV RG0 RG1
INC RG0
MOV RA PC
ALI ADD RA 4
JIF TRU
>FindOpenMemory
AIN ADD OUT 1
JIF CAR
>LoP.Error
MOV RG1 RG0
MOV RG0 OUT
LDI RG2
>CHUNK_SIZE
ALU MUL OUT RG2
ALI SRB OUT >LO_SHIFT
MOV RG3 RG1
ALU MUL RG3 RG2
ALU OR OUT RG3
MOV RA PC
ALI ADD RA 4
JIF TRU
>MarkBits
MOV RG1 RG0
ZRO RG0
LDI RG2
>CHUNK_SIZE
ALU MUL RG1 RG2
LOD RA SP
0
POP 1
JMP
>LoadFile
NUL OUT
LOD RA SP
0
POP 1
RET
PAS RG0
JIF EQZ
>InC.Skip
MOV RG1 RG0
ALI MUL RG1 >PROC_WORDS
LOD RG2 RG1
>ProcList
LDI RG3
>SIB_MASK
ALU NOT RG3 RG3
ALU AND RG2 RG3
LDI RG3
>PARENT_MASK
ALU NOT RG3 RG3
ALU AND RG2 RG3
ZRO RG3
LOD RG3 RG3
>CurrentProcID
MOV RG4 RG3
ALI SLB RG4 >PARENT_SHIFT
ALU OR RG2 RG4
STR RG2 RG1
>ProcList
ALI MUL RG3 >PROC_WORDS
LOD RG2 RG3
>ProcList
LDI RG1
>CHILD_MASK
ALF AND RG1 RG2
JIF NEZ
>InC.FindLastSib
ALU OR RG2 RG0
STR RG2 RG3
>ProcList
RET
ALI MUL RG1 >PROC_WORDS
LOD RG2 RG1
>ProcList
LDI RG3
>SIB_MASK
ALF AND RG3 RG2
JIF EQZ
>InC.FoundLast
ALI SRB RG3 >SIB_SHIFT
MOV RG1 RG3
JMP
>InC.FindLastSib
ALU OR RG2 RG0
STR RG2 RG1
>ProcList
RET
PAS RG0
JIF EQZ
>ReC.Done
MOV RG1 RG0
ALI MUL RG1 >PROC_WORDS
LOD RG1 RG1
>ProcList
LDI RG2
>PARENT_MASK
ALU AND RG2 RG1
ALI SRB RG2 >PARENT_SHIFT
ALI MUL RG2 >PROC_WORDS
LOD RG3 RG2
>ProcList
LDI RG4
>CHILD_MASK
ALU AND RG4 RG3
CMP RG4 RG0
JNE
>ReC.IsSibling
LDI RG4
>CHILD_MASK
ALU NOT RG4 RG4
ALU AND RG3 RG4
LDI RG4
>SIB_MASK
ALU AND RG4 RG1
ALI SRB RG4 >SIB_SHIFT
ALU OR RG3 RG4
STR RG3 RG2
>ProcList
RET
LDI RG2
>CHILD_MASK
ALU AND RG2 RG3
ALI MUL RG2 >PROC_WORDS
LOD RG3 RG2
>ProcList
LDI RG4
>SIB_MASK
ALU AND RG4 RG3
ALI SRB RG4 >SIB_SHIFT
CMP RG4 RG0
JEQ
>ReC.FoundSib
MOV RG2 RG4
JMP
>ReC.SibLoop
LDI RG4
>SIB_MASK
ALU AND RG1 RG4
ALI SRB RG1 >SIB_SHIFT
ALU NOT RG4 RG4
ALU AND RG3 RG4
ALU OR RG3 RG1
STR RG3 RG2
>ProcList
RET
ALI SET FLG >DRIVE_PTR_BIT
MOV IO RG0
ALI UST FLG >DRIVE_PTR_BIT
MOV RG0 IO
PAS RG0
JIF EQZ
>LoF.Done
STR IO RG1
0
INC RG1
DEC RG0
JIF NEZ
>LoF.LoadLoop
RET
ZRO RG1
LOD RG3 RG1
>MallocBMPs
LDI RG4
>WORD_SIZE
MOV RG5 RG1
ALU MOD RG5 RG4
AFN SET RG3 RG5
JIF CAR
>FOM.Not0
LDI RG2
1
MOV RG5 RG1
ALU ADD RG5 RG2
CMP RG2 RG0
JEQ
>FOM.Success
AFN MOD RG5 RG4
JIF EQZ
>FOM.SameWord
MOV RG6 RG5
ALU DIV RG6 RG4
ALI MOD RG6 >BMP_WORDS
LOD RG3 RG6
>MallocBMPs
MOV RG6 RG5
ALU MOD RG6 RG4
AFN SET RG3 RG6
JIF CAR
>FOM.Hit1
INC RG5
INC RG2
JMP
>FOM.InLoop
MOV RG1 RG5
INC RG1
LDI RG5
>NUM_CHUNKS
CMP RG5 RG1
JLT
>FOM.NoSpace
AFN MOD RG1 RG4
JIF NEZ
>FOM.Loop
MOV RG5 RG1
ALU DIV RG5 RG2
LOD RG3 RG5
>MallocBMPs
JMP
>FOM.Loop
MOV OUT RG1
RET
NUL OUT
RET
ZRO RG2
LOD RG2 RG2
>MarkInst
STR RG2 RG2
>MoB.ModBit
JMP
>ModifyBits
ZRO RG2
LOD RG2 RG2
>UnmarkInst
STR RG2 RG2
>MoB.ModBit
JMP
>ModifyBits
LDI RG2
>WORD_SIZE
MOV RG3 RG0
ALU DIV RG3 RG2
LOD RG5 RG3
>MallocBMPs
MOV RG4 RG0
ALU MOD RG4 RG2
NOP
INC RG4
DEC RG1
JIF EQZ
>MoB.Done
ALF MOD RG4 RG2
JIF NEZ
>MoB.Loop
STR RG5 RG3
>MallocBMPs
INC RG3
ALI MOD RG3 >BMP_WORDS
LOD RG5 RG3
>MallocBMPs
JMP
>MoB.Loop
STR RG5 RG3
>MallocBMPs
RET
