JMP >Init
%
  TBOS v1.0
  ---------
  
  TSOS is a small-scale operating system for the TelGen Computer System.
  It will intentionally be written with as few "magic numbers" as possible for maximum versatility.
  It would be very difficult to let empty arrays be defined using labels in TASL, so instead comments are added for clarification.
  
  v1.0 Adds the foundations for the operating system, which includes:
	Program starting and memory allocation.
	Process stopping and memory deallocation.
	Multiprogramming (though not multithreading).
	Process family tree.
  
  With the specs:
    16 max processes.
	Round robin process scheduling.
	Round robin memory allocation.
	Memory allocation/deallocation via 4-word bitmap.
    Memory allocation bitmap includes OS occupied chunks (stack + code).
  
  v1.0 is especially small-scale, and future versions will modify 1.0 to achieve higher functions.
%

/ ------------------------------------------------------------Data------------------------------------------------------------

/ Process = [1-bit Active] [4-bit parent] [4-bit nextSib] [4-bit child]
/ NOTE: This could be modified to support 32 procs, but memory issues will start occurring.
@MAX_PROC = 16
@PARENT_MASK = 0xF00
@PARENT_SHIFT = 8
@SIB_MASK = 0xF0
@SIB_SHIFT = 4
@CHILD_MASK = 0xF

/ 16 max proc x 1 word per proc = 16 words
#ProcList = ~16

/ Number of current active procs
#ProcCount = 0

/ Each process needs all registers stored except for PC, IO, EXA, and EPC
/ 16 max proc x 12 reg per proc = 192
#StateList = ~192

/ We need to know what the current procID is.
#CurrentProc = 0

/ ------------------------------------------------------------Code------------------------------------------------------------



/ Initializes the OS environment (may have to remove the bootloader too, and zero out some key registers)
#Init



/ We need an entry point to return to.
/ While this may be somewhat confusing, remember we don't have a BIOS to store the previous process somewhere
/ That's where this function comes in. It sets up the OS after an exception, for the exception handler to take over.
#Entry



/ One thing we need is something to dispatch processes
#Dispatcher



/ We also need something to handle exceptions
#ExHandler



/ A dedicated syscall handler would be nice
#SysHandler



/ We will need something to terminate processes
#Terminate



/ Something has to spawn new processes
#SpawnProc


